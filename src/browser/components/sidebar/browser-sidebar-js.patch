diff --git a/browser/components/sidebar/browser-sidebar.js b/browser/components/sidebar/browser-sidebar.js
index 98724900b2d592ee21f659924fe062f33bdd936f..ed4d428563c366cfe757d23a6834dcdbb0fb86c4 100644
--- a/browser/components/sidebar/browser-sidebar.js
+++ b/browser/components/sidebar/browser-sidebar.js
@@ -16,6 +16,7 @@ var SidebarController = {
       get title() {
         return document.getElementById(elementId).getAttribute("label");
       },
+	  isBottom: false,
       ...rest,
     };
   },
@@ -57,6 +58,9 @@ var SidebarController = {
     if (this._sidebars) {
       return this._sidebars;
     }
+	/**
+     * @returns {Map<string, { title: string, url?: string, onclick?: string, menuId?: string, triggerButtonId?: string, iconurl: string, isBottom: boolean }>}
+     */
 
     this._sidebars = new Map([
       [
@@ -71,7 +75,7 @@ var SidebarController = {
           keyId: "key_gotoHistory",
           menuL10nId: "menu-view-history-button",
           revampL10nId: "sidebar-menu-history",
-          iconUrl: "chrome://browser/content/firefoxview/view-history.svg",
+          iconurl: "chrome://browser/skin/history.svg",
         }),
       ],
       [
@@ -85,7 +89,7 @@ var SidebarController = {
           classAttribute: "sync-ui-item",
           menuL10nId: "menu-view-synced-tabs-sidebar",
           revampL10nId: "sidebar-menu-synced-tabs",
-          iconUrl: "chrome://browser/content/firefoxview/view-syncedtabs.svg",
+          iconurl: "chrome://browser/skin/tab.svg",
         }),
       ],
       [
@@ -97,22 +101,40 @@ var SidebarController = {
           keyId: "viewBookmarksSidebarKb",
           menuL10nId: "menu-view-bookmarks",
           revampL10nId: "sidebar-menu-bookmarks",
-          iconUrl: "chrome://browser/skin/bookmark-hollow.svg",
+          iconurl: "chrome://global/skin/icons/bookmark-outline.svg",
           disabled: true,
         }),
       ],
+      [
+        "sidebar-view-addons",
+        {
+          title: "Add-ons",
+          onclick: "BrowserOpenAddonsMgr();",
+          iconurl: "chrome://mozapps/skin/extensions/category-themes.svg",
+          isBottom: true,
+        },
+      ],
+      [
+        "sidebar-view-preferances",
+        {
+          title: "Preferences",
+          onclick: "openPreferences();",
+          iconurl: "chrome://global/skin/icons/settings.svg",
+          isBottom: true,
+        },
+      ],
     ]);
 
     if (!this.sidebarRevampEnabled) {
       this.registerPrefSidebar(
         "browser.megalist.enabled",
-        "viewMegalistSidebar",
+        "viewDownloadsSidebar",
         {
-          elementId: "sidebar-switcher-megalist",
-          url: "chrome://global/content/megalist/megalist.html",
-          menuId: "menu_megalistSidebar",
-          menuL10nId: "menu-view-megalist-sidebar",
-          revampL10nId: "sidebar-menu-megalist",
+          elementId: "sidebar-switcher-downloads",
+          title: "Downloads",
+          url: "about:downloads",
+          menuId: "menu_downloadsSidebar",
+          iconurl: "chrome://browser/skin/downloads/downloads.svg",
         }
       );
     } else {
@@ -154,6 +176,19 @@ var SidebarController = {
   },
   POSITION_START_PREF: "sidebar.position_start",
   DEFAULT_SIDEBAR_ID: "viewBookmarksSidebar",
+  
+  SIDEBAR_KEEP_TABS_ACTIVE_PREF: "pulse.sidebar.keeptabsactive.enabled",
+  SIDEBAR_TABS_PREF: "pulse.sidebar.enabled",
+  SIDEBAR_EXTENSIONS_PREF: "pulse.sidebar.extensions.enabled",
+
+  _sidebarIcons: null,
+  _sidebarIconsBottom: null,
+  /** @type {HTMLDivElement?} */
+  _sidebarTabs: null,
+  /** @type {string[]} */
+  loadedSidebars: null,
+  /** @type {boolean} */
+  _keepTabsActivePref: false,
 
   // lastOpenedId is set in show() but unlike currentID it's not cleared out on hide
   // and isn't persisted across windows
@@ -220,7 +255,45 @@ var SidebarController = {
     } else {
       this._switcherTarget.addEventListener("command", () => {
         this.toggleSwitcherPanel();
-      });
+	});
+    this._sidebarIcons = document.getElementById("sidebar-icons");
+    this._sidebarIconsBottom = document.getElementById("sidebar-icons-bottom");
+    this._sidebarTabs = document.getElementById("sidebar-container");
+
+    this._keepTabsActivePref = Services.prefs.getBoolPref(
+      this.SIDEBAR_KEEP_TABS_ACTIVE_PREF,
+      false
+    );
+
+    let sidebarVisible = false;
+    if (window.toolbar.visible) {
+      sidebarVisible = Services.prefs.getBoolPref(this.SIDEBAR_TABS_PREF, true);
+    }
+
+    this.setSidebarVisibility(sidebarVisible);
+
+    // Keep track on the changes of the sidebar visibility
+    Services.prefs.addObserver(this.SIDEBAR_TABS_PREF, this);
+
+    Services.prefs.addObserver(this.SIDEBAR_KEEP_TABS_ACTIVE_PREF, this);
+
+    //Check the pre-existance of sidebar and if it is not there, create it
+    var sidebar = this.browser;
+    let sidebarExists = !!sidebar;
+    if (this._keepTabsActivePref && sidebarExists) {
+      sidebar.remove();
+    } else if (this._keepTabsActivePref && !sidebarExists) {
+      this.createBrowser("sidebar");
+    }
+
+    // Temporary migration for 1.0.0-a.61
+    this._box.style.marginLeft = "unset";
+
+    this.loadedSidebars = [];
+
+    // Ensure that the sidebar's position is correct on startup. The position
+    // will be fetched by the lazy preference getter down the bottom
+    this.setPosition();
       this._switcherTarget.addEventListener("keydown", event => {
         this.handleKeydown(event);
       });
@@ -231,16 +304,39 @@ var SidebarController = {
     Services.obs.addObserver(this, "intl:app-locales-changed");
 
     this._initDeferred.resolve();
+
+    // Add all of the sidebar items ot the left bar. Note that this requires
+    // the init to be fully completed, so we make sure to put it below the
+    // promise resolution
+	const sidebaritems = this.sidebars.keys();
+    const sidebarExtensionVis = Services.prefs.getBoolPref(
+      this.SIDEBAR_EXTENSIONS_PREF,
+      false
+    );
+
+    for (const sidebaritem of sidebaritems) {
+      if (this.sidebars.get(sidebaritem).extensionId && !sidebarExtensionVis) {
+        return;
+      }
+      this.createSidebarItem(sidebaritem, this.sidebars.get(sidebaritem), true);
+    }
   },
 
   uninit() {
+    // Remove the sidebar seperator with class sidebar-divider
+    const sidebarDivider = document.querySelector(".sidebar-divider");
+    if (sidebarDivider) {
+      sidebarDivider.remove();
+    }
     // If this is the last browser window, persist various values that should be
     // remembered for after a restart / reopening a browser window.
     let enumerator = Services.wm.getEnumerator("navigator:browser");
     if (!enumerator.hasMoreElements()) {
       let xulStore = Services.xulStore;
 
-      xulStore.persist(this._title, "value");
+      if (!this._keepTabsActivePref) {
+        xulStore.persist(this._box, "sidebarcommand");
+      }
     }
 
     Services.obs.removeObserver(this, "intl:app-locales-changed");
@@ -254,7 +350,7 @@ var SidebarController = {
   /**
    * The handler for Services.obs.addObserver.
    */
-  observe(_subject, topic, _data) {
+  observe(_subject, topic, data) {
     switch (topic) {
       case "intl:app-locales-changed": {
         if (this.isOpen) {
@@ -265,6 +361,54 @@ var SidebarController = {
           this.showInitially(this.lastOpenedId);
           break;
         }
+		+        break;
+      }
+
+      case "nsPref:changed": {
+        switch (data) {
+          case this.SIDEBAR_TABS_PREF:
+            this.setSidebarVisibility(
+              Services.prefs.getBoolPref(this.SIDEBAR_TABS_PREF, true)
+            );
+            break;
+
+          case this.SIDEBAR_KEEP_TABS_ACTIVE_PREF:
+            //Hide the sidebar if it is open
+            if (this.isOpen) {
+              this.hide();
+            }
+
+            this.uninit();
+
+            // We need to clean up all existing sidebar frames to prevent a memory leak.
+            for (const loadedSidebar of this.loadedSidebars) {
+              const elementId = `sidebar-browser-${loadedSidebar}`;
+              const element = document.getElementById(elementId);
+
+              if (element) {
+                element.remove();
+              }
+            }
+
+            // The sidebar depends on a browse existing. If this has been
+            // destroyed, we need to re-init it. Although, first we need to
+            // remove any possible cached value
+            this._browser = null;
+            if (!this.browser) {
+              /** @type {HTMLElement} */
+              const browser = document.createXULElement("browser");
+              browser.setAttribute("id", "sidebar");
+              browser.setAttribute("autoscroll", "false");
+              browser.setAttribute("disablehistory", "true");
+              browser.setAttribute("disablefullscreen", "true");
+              browser.setAttribute("tooltip", "aHTMLTooltip");
+              this._box.appendChild(browser);
+            }
+
+            this.init();
+            break;
+        }
+        break;
       }
     }
   },
@@ -385,18 +529,32 @@ var SidebarController = {
     // First reset all ordinals to match DOM ordering.
     let browser = document.getElementById("browser");
     [...browser.children].forEach((node, i) => {
+      // Do not change ordinal on vertical tabs
+      if (node.id == "TabsToolbar" || node.id == "verticaltabs-splitter") {
+        return;
+      }
       node.style.order = i + 1;
     });
     let sidebarMain = document.getElementById("sidebar-main");
     if (!this._positionStart) {
-      // DOM ordering is:     sidebar-main |  sidebar-box  | splitter |   appcontent  |
-      // Want to display as:  |   appcontent  | splitter |  sidebar-box  | sidebar-main
-      // So we just swap box and appcontent ordering and move sidebar-main to the end
+      // DOM ordering is:     | sidebar-container |  sidebar-box  | splitter |   appcontent  |
+      // Want to display as:  |   appcontent  | splitter |  sidebar-box | sidebar-container |
+      // So we just swap
+      // - sidebar-container and appcontent
+      // - splitter and sidebar-box
+
+      // sidebar-container and appcontent
       let appcontent = document.getElementById("appcontent");
-      let boxOrdinal = this._box.style.order;
-      this._box.style.order = appcontent.style.order;
+      let boxOrdinal = this._sidebarTabs.style.order;
+      this._sidebarTabs.style.order = appcontent.style.order;
 
       appcontent.style.order = boxOrdinal;
+
+      // splitter and sidebar-box
+      const splitterBoxOrdinal = this._splitter.style.order;
+      this._splitter.style.order = this._box.style.order;
+      this._box.style.order = splitterBoxOrdinal;
+
       // the launcher should be on the right of the sidebar-box
       sidebarMain.style.order = parseInt(this._box.style.order) + 1;
       // Indicate we've switched ordering to the box
@@ -602,6 +760,9 @@ var SidebarController = {
   },
 
   _loadSidebarExtension(commandID) {
+    if (this._keepTabsActivePref && this.loadedSidebars.includes(commandID)) {
+      return;
+    }
     let sidebar = this.sidebars.get(commandID);
     if (typeof sidebar.onload === "function") {
       sidebar.onload();
@@ -846,12 +1007,14 @@ var SidebarController = {
     }
     return this._show(commandID).then(() => {
       this._loadSidebarExtension(commandID);
+	  this.loadedSidebars.push(commandID);
 
       if (triggerNode) {
         updateToggleControlLabel(triggerNode);
       }
 
       this._fireFocusedEvent();
+	  this.loadedSidebars.push(commandID);
       return true;
     });
   },
@@ -888,6 +1051,38 @@ var SidebarController = {
    */
   _show(commandID) {
     return new Promise(resolve => {
+      if (this._keepTabsActivePref) {
+        const browserID = `sidebar-browser-${commandID}`;
+
+        // Check if the browser element for this command has already been
+        // created.
+        if (!document.getElementById(browserID)) {
+          // If it doesn't exist, we should create it. Note that this
+          // function will set this._browser to be this new browser
+          this.createBrowser(browserID, commandID);
+        } else {
+          // We need to set the active browser to be the one that already exists
+          this._browser = document.getElementById(browserID);
+        }
+
+        // We must ensure ensure that all non-active browsers are hidden.
+        let sidebarBrowsers = document.querySelectorAll(
+          "[id^='sidebar-browser-']"
+        );
+
+        for (const browser of sidebarBrowsers) {
+          // If the browser matches the one we want to display, make sure it is
+          // not hidden
+          if (browser.id == browserID) {
+            browser.removeAttribute("hidden");
+            continue;
+          }
+
+          // Otherwise, hide all other browsers
+          browser.setAttribute("hidden", "true");
+        }
+      }
+
       if (this.sidebarRevampEnabled) {
         this._box.dispatchEvent(
           new CustomEvent("sidebar-show", { detail: { viewId: commandID } })
@@ -927,7 +1122,13 @@ var SidebarController = {
 
       this.browser.setAttribute("src", url); // kick off async load
 
-      if (this.browser.contentDocument.location.href != url) {
+      const activeSidebarUnloaded =
+        this._keepTabsActivePref && !this.loadedSidebars.includes(commandID);
+      const regularSidebarUnloaded =
+        !this._keepTabsActivePref &&
+        this.browser.contentDocument.location.href != url;
+
+      if (activeSidebarUnloaded || regularSidebarUnloaded) {
         this.browser.addEventListener(
           "load",
           () => {
@@ -973,11 +1174,14 @@ var SidebarController = {
     // create a new content viewer because the old one doesn't get destroyed
     // until about:blank has loaded (which does not happen as long as the
     // element is hidden).
-    this.browser.setAttribute("src", "about:blank");
-    this.browser.docShell.createAboutBlankDocumentViewer(null, null);
+    if (!this._keepTabsActivePref) {
+      this.browser.setAttribute("src", "about:blank");
+      this.browser.docShell.createAboutBlankDocumentViewer(null, null);
+    }
 
     this._box.removeAttribute("checked");
     this._box.hidden = this._splitter.hidden = true;
+	this._sidebarIcons.removeAttribute("checked");
 
     let selBrowser = gBrowser.selectedBrowser;
     selBrowser.focus();
@@ -991,13 +1195,29 @@ var SidebarController = {
    * none if the argument is an empty string.
    */
   selectMenuItem(commandID) {
+    // Jadua modification: This needs to update both which sidebar item is
+    // checked and which dropdown item is checked. Hence, we are overriding this
+    // method.
     for (let [id, { menuId, triggerButtonId }] of this.sidebars) {
       let menu = document.getElementById(menuId);
+	  if (!menuId) {
+        continue;
+      }
       if (!menu) {
         return;
       }
-      let triggerbutton =
+      let dropdownTriggerButton =
         triggerButtonId && document.getElementById(triggerButtonId);
+
+      const sidebarTriggerButton = document.getElementById(
+        `sidebar-background-${id}`
+      );
+
+      setCheckedForItem(id, menu, dropdownTriggerButton);
+      setCheckedForItem(id, menu, sidebarTriggerButton);
+    }
+
+    function setCheckedForItem(id, menu, triggerbutton) {
       if (id == commandID) {
         menu.setAttribute("checked", "true");
         if (triggerbutton) {
@@ -1013,6 +1233,107 @@ var SidebarController = {
       }
     }
   },
+
+  // ===========================================================================
+  // Pulse methods
+
+  /**
+   * Create sidebar browser between active and inactive for persistence reasons
+   *
+   * @todo What the hell does this comment mean?
+   */
+  createBrowser(id, commandID) {
+    let browser = document.createXULElement("browser");
+    browser.setAttribute("id", id);
+    browser.setAttribute("autoscroll", "false");
+    browser.setAttribute("disablehistory", "true");
+    browser.setAttribute("disablefullscreen", "true");
+    browser.setAttribute("tooltip", "aHTMLTooltip");
+    browser.setAttribute("class", "sidebar-tab");
+    if (commandID) {
+      browser.setAttribute("sidebarcommand", commandID);
+    }
+    browser.setAttribute("style", "min-width: 14em; -moz-box-flex: 1;");
+    this._box.appendChild(browser);
+    this._browser = browser;
+  },
+
+  /**
+   * Set the sidebar tabs to be visible or not visible
+   * @param {boolean} visible Sets the sidebar to be visible or not visible
+   */
+  setSidebarVisibility(visible) {
+    const sidebarContainer = this._sidebarTabs;
+
+    if (visible) {
+      sidebarContainer.style.display = "flex";
+    } else {
+      sidebarContainer.style.display = "none";
+    }
+  },
+
+  async createSidebarItem(id, config, isinit = false) {
+    if (!isinit) {
+      await this.promiseDeferred;
+    }
+
+    // if the sidebar item is already created, do nothing
+    if (document.getElementById(`sidebar-background-${id}`)) {
+      document.getElementById(`sidebar-background-${id}`).remove();
+    }
+
+    //if id contains ext
+    if (id.includes("ext")) {
+      if (!document.getElementsByClassName("sidebar-divider").length) {
+        const divider = document.createElement("hr");
+        divider.classList.add("sidebar-divider");
+        this._sidebarIcons.appendChild(divider);
+      }
+    }
+
+    const background = document.createXULElement("vbox");
+    background.classList.add("sidebar-item-background");
+    background.setAttribute("id", `sidebar-background-${id}`);
+
+    if (config.url) {
+      background.onclick = () => {
+        this.toggle(id);
+      };
+    }
+
+    if (config.onclick) {
+      background.setAttribute("onclick", config.onclick);
+    }
+
+    const iconEl = document.createElement("image");
+    iconEl.setAttribute("id", `sidebar-icon-${id}`);
+    iconEl.setAttribute("src", `${config.iconurl}`);
+    iconEl.style.backgroundImage = `url(${config.iconurl})`;
+
+    background.append(iconEl);
+
+    //If the item is meant to be on bottom, add it to the bottom
+    if (config.isBottom) {
+      this._sidebarIconsBottom.appendChild(background);
+    } else {
+      this._sidebarIcons.appendChild(background);
+    }
+
+    setTimeout(() => {
+      iconEl.setAttribute("class", "sidebar-icon-item");
+    }, 100);
+  },
+
+  deleteSidebarItem(id) {
+    const background = document.getElementById(`sidebar-background-${id}`);
+    const icon = document.getElementById(`sidebar-icon-${id}`);
+    if (background) {
+      background.remove();
+    }
+    if (icon) {
+      icon.remove();
+    }
+  },
 };
 
 // Add getters related to the position here, since we will want them
